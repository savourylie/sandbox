g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method='lm', se=FALSE)
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method='loess', se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family='Times')
plot(myx, myy, type='l', ylim=c(-3, 3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g + geom_line(0)
g(0) + geom_line()
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim=c(-3, 3))
g <- ggplot(dataset, aes(x=displ, y=hwy, color=factor(year)))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method='lm', se=FALSE, size=2, color='black')
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method='loess', se=FALSE, size=2, color='black')
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method='lm', se=FALSE, size=2, color='black') + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, binwidth=18497/30)
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom='density')
qplot(price, data=diamonds, geom='density', color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth='lm')
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method='lm')
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method='lm')
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2) + geom_smooth(method='lm', size=3, color='pink')
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
update.packages(checkBuilt=TRUE, ask=FALSE)
update.packages(checkBuilt=TRUE, ask=FALSE)
sessionInfo()
library(nlme)
install.packages(nlme)
install.packages('nlme')
install.packages("nlme")
library(nlme)
sessionInfo()
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?transform
head(airquality)
str(airquality)
data(airquality)
str(airquality)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
choose(12, 2)
(140 - 115) / (175 - 115)
library(swirl)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hclust(d = distxy)
hc <- hclust(d = distxy)
plot(hc)
ploy(as.dendogram(hc))
ploy(as.dendrogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5, col='blue')
abline(h=4, col='red')
abline(h=.4, col='red')
5
12
abline(h=.05, col='red')
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
choose(15, 2)
66.75 - 43.5
5/ 440
0.4424 + 0.2766 + 0.1162 + 0.0962 + 0.0458 + 0.0229
0.4424 + 0.2766
0.4424 + 0.2766 + 0.1162 + 0.0962
0.4424 + 0.2766 + 0.1162
0.4424 + 0.2766 + 0.1162 + 0.0962
library(swirl)
swirl()
cmat
points(cx, cy, col=c('red', 'orange', 'purple', pch=3, cex=2, lwd=2))
points(cx, cy, col=c('red', 'orange', 'purple'), pch=3, cex=2, lwd=2))
points(cx, cy, col=c('red', 'orange', 'purple'), pch=3, cex=2, lwd=2)
mdist(cx, cy)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
play()
cols1
newClust
cols1[newClust]
nxt()
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
play()
head(dataFrame)
nxt()
kmeans(dataFrame, centers=3)
kmObj$iter
play()
kmObj$cluster
kmObj.cluster
nxt()
plot(x, y, col=kmObj$cluster, pch=19, lwd=2)
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
play()
quit()
q()
nxt()
0
q
exit()
main()
0.1162 + 0.0962
0.8^5
1 + 0.9*(-.54 * .2 + -10 * .1 + 10 * .6)
0 + 0.9 *(0.9 *1 + -10*.1)
1 + 0.9 * (.8 * 10 + .2 * 0)
sqrt(20000)
0.2 * 0.54
6 - 1 - 0.108 + 0.1
4.992 * 0.9
5.4928
0.9 * 5.1
5.1 * 0.9 + 1
-0.54 + 0.9 * (0.5 * (-0.54) + 0.4 * (5.69) + 0.1 * (-19))
0.9 * (0.5 * (-0.54) + 0.4 * (5.69) + 0.1 * (-19))
0.9 * (0.5 * (-0.54) + 0.2 * (5.69) + 0.1 * (-19))
5.69 + 0.9 * (0.2 * (-0.54) + 0.1 * (5.69) + 0.6 * (9.1) + 0.1 * (-10))
0.9 * 18
(0.9 * 18 + 5) /2 + 1
(1 - 0.5) * 2 + 0.5 * (5 + 0.9 * 18)
(1 - 1 / 5) * (-1) + (1/5) * (2 + 0.9 * 3)
(1 - 1 / 20) * (-2.5) + (1/20) * (5 + 0.9 * 2)
36 * 64
2304 / 2
0.9 * 12 + 5
(3/4) * (-1) + (1/4) * (2 + 0.9 * 3)
(5/6) * (-2.5) + (1/6) * (5 + 0.9 * 2)
(5/6) * (-2.5) + (1/6) * (5 + 0.9 * 2)
92 / 20
.92 / 20
.92 / 25
.92 / 30
.92 / 50
.92 / 48
3 * 2 * 4 * 4 * 4 * 4
2000 / 30
0.98 / 50
0.98 / 500
0.98 / 250
0.98 / 500
0.98 / 600
0.98 / 700
23 * 2 + 26 * 2 + 24
122 / 5
1 / 500
1/600
1/700
1/800
1/800
1/900
1/1200
1/1500
1/2000
(0.975 * 2 + 0.95) / 3
6 / 3
(2.5836540774 + 2.35076315744 + 2.3878838611) / 3
(0.620378641279 + 0.609450658049 + 0.494880509436) /3
(11.225 + 14.65 + 14.7) / 3
(2.5 + 2.0 + 2.2) /3
0.896 * 3 + 2.514
2.514 - 0.896 * 3
27 / 30
29 / 30
848 / 901
65/997
24/40
16/24
24 /45
16 /24
14 / 23
23 / 45
(352 - 300)/ 300
1 / 1.1733
17 /29
0.8^14
0.7^14
0.9^14
0.75^14
14 / 401
64 / 401
3 * 2 * 4 * 4 * 4 * 4
3 * 2 * 4
14 / 20
3.459 / 2
8.459 / 2
6.459 / 2
3.2295 + 1.7295
4.925 / 2
(1.73 + 3.23) / 2
2.48 * 4 + 4.459
1 / 0.9 - 1
20 / 2.1
(-0.0001581 -0.0007234 + 0.0003890) / 3
1 / (1 - 0.01)
1 / (1 - 0.02)
1 / (1 - 0.05)
1 / (1 - 1.05)
1 / (1 - 1.01)
1 / (1 - 0.99)
1 / (1 - 0.98)
1 / (1 - 0.96)
1 / (1 - 0.9)
1 / (1 + 0.01)
1 / (1 + 0.05)
1 / (1 + 0.05)^2
1 / (1 + 0.05)^3
1 / (1 + 0.05)^10
2 / (1 + 0.04)^100
2 / (0.04)
1/0.05
0.75 + 0.25 * 2
50 * 0.19
50 - 9.5
sqrt(1000) * 0.63
sqrt(2000)
sqrt(3)
sqrt(10)
sqrt(120)
sqrt(120) == (1/1000) * sqrt(x)
x
10.95445 * 1000
$1
.Last.value^2
500 * 252 * 8
321.319995 / 160.820818
1.998 * 164.189196
1.998 * 162.757754
55.62 / 4
16.99 * 3
13.99 * 3
13.99 * 3 - 55.62
13.99 * 3 + 13.65
42.624
42.624 / 4
9.99 * 3 - 42.624
10.99 * 3 - 42.624
42.624
42.624 / 3
44.42 - 42.60
1.82 + 14.2
(204.990367 / 410.390715) * 414.450714
(280.959532 / 562.480982) * 561.010952
(91.599998 / 77.489205) * 9840800
(160.820818 / 321.319995) *  	308.600000
(157.692690 / 315.069995) * 327.499996
2 * 252 * 6 * 500
(2 * 252 * 6 * 500) / 60
25200 / 60
(25200 / 60) / 24
17.5 / 50
0.35 * 24
8.5 * 10^-1
8.54 * 10^-1 + 4.46*10-2
8.54 * 10^-1 + 4.46*10^-2
8.54 * 10^-1 + 4.46*10^-2 + 2.40* 10^-2
8.54 * 10^-1 + 4.46*10^-2 + 2.40* 10^-2 + 1.59*10^-2 + 1.09*10^-2
8.54 * 10^-1 + 4.46*10^-2 + 2.40* 10^-2 + 1.59*10^-2 + 1.09*10^-2 + 7.54*10^-3
164.189196 / 160.820818 -1
0.007446^2
0.007320^2
0.007291^2
0.006933^2
741.110699- 741.577999
739.232999 - 740.000099
0.015589 * 0.015589
519.01 - 524.89
519.01 / 524.89 - 1
40.4 / 40.0644 - 1
39.75 / 40.4 - 1
39.75 / 40.0644 - 1
39.8 / 39.82 -1
40.4 / 39.74 - 1
40.4 / 39.75 - 1
0.998817 - 1
98.8544404369 / (0.850150176875 * abs(1))
98.8544404369 / (0.850150176875 * abs(-1))
98.8544404369 / (0.850150176875 * abs(-0.000926718878684) * 0.0256221306219)
log(e)
exp(1)
log(exp(1))
log(98.8544404369 / (0.850150176875 * abs(-0.000926718878684) * 0.0256221306219))
200 * 4 * 6
4800 / 60
200 / 60
3 * 4 * 6
7072 / 60
70 * 150
10500 /60
175 / 60
41197 / 60
686.6167 / 60
5000 /24
11327 / 60
exp(5.346268)
exp(5.456446)
21*12
1.96 * 0.2 * 0.8 / 0.05
1.96 * 0.5 * 0.5 / 0.05
9.8 / 0.05
(1.96 * 0.5 * 0.5) / 0.05
10000 / 3600
10976.9334607
80076729.5957 / 7295
library(lubridate)
version
version
library(lubridate)
install.packages(lubridate)
install.packages('lubridate')
install.packages('bsts')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('forecast')
data("AirPassengers")
Y <- window(AirPassengers, start=c(1949, 1), end=c(1959,12))
Y
?window
c(1949, 1)
c(1, 2, 3, 4, 5)
arima <- arima(log10(Y),
order=c(0, 1, 1),
seasonal=list(order=c(0,1,1), period=12))
?arima
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
AirPassengers
summary(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
?abline
abline(reg=lm(AirPassengers~time(AirPassengers)))
?abline
abline(reg=lm(AirPassengers ~ time(AirPassengers)))
abline(reg=lm(AirPassengers ~ time(AirPassengers), data=AirPassengers))
reg <- lm(AirPassengers ~ time(AirPassengers))
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
boxplot(AirPassengers~cycle(AirPassengers))
?aggregate
?adf.test
library(tseries)
?adf.test
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
?diff
data(package='fma')
install.packages('fma')
data(package='fma')
(-0.098453 -0.437820) /2
(-1.768538 - 0.807648) / 2
(1.732721 - 0.807648) / 2
5^13
5^13 * 10^8 * 6^16
space_size <- 5^13 * 10^8 * 6^16
log(space_size) / log(5348)
space_size <- 5^13 * 10^8 * 6^16 * 9
log(space_size) / log(5348)
1000 / 28.9
34
200.027 * 34
21 * log(7)
e
exp(40.86)
log(7) / 21
exp(0.09266)
6800/60
37 * 3
75 / 1.75^2
75 / 1.75^3
29.1221629661 * 34 + 9.8464591526
29.193443 * 34 + 9.8464591526
5422 * 6
48782 / 5422
32526 - 32532
3500000000 / 1000
108000 * 35
(3780000 / 60) / 60
7/12
log(7.68)
2.03862 / 13.6
exp(0.1498985)
exp(0.1498985) - 1
1.16^13.6
1.162^13.6
1.1617^13.6
log(7.675)
log(7.675) / 13.6
exp(0.1498506) + 1
exp(0.1498506) - 1
200.03 * 35
7001.05 + 9.21
11 - 1/12
log(7.001) / 10.92
exp(0.17821) - 1
5^15 * 6^10
5^9 * 6^6
5244*2 *3
5422*2 *3
exp(log(2.762) / 10.92) - 1
1.361996 * 10^9
exp(log(1.361996 * 10^9) / 10.92) - 1
1 + 9/12
exp(log(1.104) / 1.75) - 1
2186.48 / 2058.2
exp(log(1.062) / 1.75) - 1
219.03 / 199.21
exp(log(1.099) / 1.75) - 1
3.95 + 1095.14
exp(log(1.099) / 1.75) - 1
8156 * 0.15
1223 / 252
66.07 / 2.49
exp(log(2.433) / 6) - 1
5^4 * 10 ^4 * 6^8
log(0.05) / 21
exp(log(0.05) / 21)
0.8^21
0.8^10
0.8^15
exp(log(1.2) / 6) - 1
12 / 252
1000 - 998.40
60.30 * 0.3 + 59.62 * 0.7
59.82 * 384
22970.88 + 9.21
29.01 + 0.3 + 29.14 * 0.7
29.01 * 0.3 + 29.14 * 0.7
29.10 * 384
11174.40 + 9.21
exp(log(11.18) / 28) - 1
20 * 1000
20000 / 60
333.3333 / 60
exp(log(5.258) / 28) - 1
1180.63 / 1149.37
(6964 + 1192) *3 *2
5^4
5^5
exp(log(2.141) / 1.75) - 1
exp(log(1.502) / 1.75) - 1
0.8^10
0.8^20
0.8^15
0.8^13
0.8^12
0.8^13
0.8^14
0.8^13
12000 * 16000
252 * 3000 * 30 * 253
252 * 3000 * 30
40000000 / 60
666666.7 / 60
11111.11 / 24
462.9629 / 30
